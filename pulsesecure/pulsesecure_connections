#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# 07.02.2018 by Roland Mueller
# eg. by using 500 licenses
pulsesecure_connections_default_levels = (480, 490)

def inventory_pulsesecure_connections(info):
    return [ (None, pulsesecure_connections_default_levels) ]

def check_pulsesecure_connections(item, params, info):
    warn,crit = params
    webUsers = int(info[0][0])
    totalSessions = int(info[0][1])

    states = []
    webUsersInfo = "Users: %s" % webUsers
    if webUsers >= crit:
        webUsersInfo += "(!!)"
        state = 2
    elif webUsers >= warn:
        webUsersInfo += "(!)"
        state = 1
    else:
        state = 0
    states.append((state,webUsersInfo,("Users", webUsers, warn, crit, 0, 100)))

    totalSessionsInfo = "Total Sessions: %s" % totalSessions
    #if totalSessions >= crit:
    #    totalSessionsInfo += "(!!)"
    #    state = 2
    #elif totalSessions >= warn:
    #    totalSessionsInfo += "(!)"
    #    state = 1
    #else:
    #    state = 0
    states.append((state,totalSessionsInfo,("Sessions", totalSessions)))

    worst_state = max([x[0] for x in states])
    info_text = ", ".join([x[1] for x in states])
    state_text = { 0:"OK", 1:"WARN", 2:"CRIT" }.get(worst_state)
    return (worst_state, "%s - Usages: %s" % (state_text, info_text), [x[2] for x in states if x[2] != None])

check_info["pulsesecure_connections"] = {
    "check_function"        : check_pulsesecure_connections,
    "inventory_function"    : inventory_pulsesecure_connections,
    "service_description"   : "VPN Connections",
    "has_perfdata"          : True,
    "snmp_scan_function"    : lambda oid: "Pulse Connect Secure" in oid(".1.3.6.1.4.1.12532.6.0"),
    "snmp_info"             : ( ".1.3.6.1.4.1.12532", [ 2, 44 ] )
}
